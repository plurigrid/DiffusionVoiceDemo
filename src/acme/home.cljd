(ns acme.home
  "Originally, a straight port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:deepgram_speech_to_text/deepgram_speech_to_text.dart" :as deepgram]
   ["package:mic_stream/mic_stream.dart" :as micstream]
   ["dart:convert" :as convert]
   [tilton.mx.api :as mx
    :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
            fm* mav mx-bound? cinfo]]
   [tilton.fmx.factory :refer [deftag deftags deftags-plus] :as fxf]
   [tilton.fmx.api :as fx
    :refer [scaffold app-bar text center column hero material-app
            container row expanded icon padding opacity
            icon-button fx-render dart-cb selection-area]]))


(def params
  {"model" "nova-2-general"
   "language" "en"
   "filler_words" false
   "punctuation" true})

(def deep-gram-api-key DEEPGRAM_API_KEY_HERE)

;; init listening stream
;; Stream<List<int>> stream = await MicStream.microphone(sampleRate: 44100); ;; DART CODE
(defn init-mic-stream []
  (.shouldRequestPermission micstream/MicStream true)
  (.listen (micstream/MicStream.microphone .sampleRate 44100) (fn [result] result)))

;; init deep gram
(defn init-deepgram [api-key params] (deepgram/Deepgram api-key .baseQueryParams params))


;; send the mic-stream to the api using the deepgram class
;; // -------------------- From a stream  --------------------
;; Stream<String> jsonStream = deepgram.transcribeFromLiveAudioStream(mic.stream);
(defn deep-stream [deepgram mic-stream]
  println (.runtimeType mic-stream)
  println (.cast mic-stream)
  ;; println (as mic-stream Stream<List<int>>)
  ;; (cF+
  ;;  [:watch (fn [_ _ new-value _ _]
  ;;              ; Make your invokeMethod calls here.
  ;;            (println "Stream returned:" new-value))]
  ;;  )
  ;; (.transcribeFromLiveAudioStream deepgram mic-stream)
  )


(defn make-app []
  (material-app {}
                {:name          :app
                 :deepgramapikey deep-gram-api-key
                 :params        params
                 :mic-stream    (init-mic-stream)
                 :dg-class      (init-deepgram deep-gram-api-key params)
                 :dg-stream     (cF+
                                 [:watch (fn [_ _ new-value _ _]
                         ; first time nil, 
                         ; then Stream<List<int>>
                                           (when-not (nil? new-value)
                                             (println "Stream returned:" new-value)))]
                                 (deep-stream (mget me :dg-class) (mget me :mic-stream)))}
                (selection-area
                 (scaffold
                  {:appBar (app-bar {:title (m/Text "TopOS Demo")})}

                  (row
                   {:mainAxisAlignment m/MainAxisAlignment.center}
                   (column {:crossAxisAlignment m/CrossAxisAlignment.center}
                           (container
                            {;:color m/Colors.yellow
                             :padding (m/EdgeInsets.symmetric .horizontal 16.0)}
                            (fx/text {:textAlign m/TextAlign.center}
                                     {:name     :textinput}
                                     (mget (fasc :app) :deepgramapikey)))
                           (fx/sized-box {:height 10})
                           (row
                            (icon-button
                             {:key         (m/ValueKey "mic")
                              :iconSize    30
                              :icon        (fx/icon m/Icons.mic)
                              :color       m/Colors.blue
                              :onPressed   (fn [] (println "pressed mic" (deep-stream (mget (fasc :app) :dg-class) (mget (fasc :app) :mic-stream))))})
                            (icon-button
                             {:key         (m/ValueKey "mic2")
                              :iconSize    30
                              :icon        (fx/icon m/Icons.add)
                              :color       m/Colors.green
                              :onPressed   (fn [] (println "pressed add"))}))

                           (fx/text {:textAlign m/TextAlign.center}
                                    {:name     :textinput}
                                    (str (mget (fasc :app) :params)))))))))
