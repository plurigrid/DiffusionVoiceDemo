(ns tilton.mx.model.base
  (:require
    [tilton.mx.foundation :refer [observe]]
    [tilton.mx.base
     :refer [trx mx-throw wtrx dprn dp dpx prog1 *trx?* def-rmap-props def-rmap-meta-props]]
    [tilton.mx.util :refer [rmap-set! rmap-meta-set!]]

    [tilton.mx.cell.base
     :refer [without-c-dependency cells-init c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input?
             c-model c-valid? c-useds
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             unlink-from-callers *causation* c-mname
             c-synaptic? c-quiesce!
             c-pulse c-pulse-last-changed c-ephemeral? c-prop c-lazy] :as cty]
    [tilton.mx.cell.evaluate :refer [cget c-awaken]]
    [tilton.mx.model.peek :refer [*mx* chk minfo md-type mref? cref? mname *md-quiescing*]]))

(def-rmap-props md-
  name)

(def-rmap-meta-props md-
  state cz)

(defn md-cell [me prop]
  (prop (md-cz me)))

;;; --- md initialization ---

;; (declare md-awaken)

(defn md-install-cell [me prop c]
  ;; note that c might not be a Cell; it is a misnomer
  (cond
    (cref? c) (do
                 (swap! c assoc
                   :prop prop
                   :me me)
                 (rmap-set! [prop me]
                   (when (c-input? c)
                     (c-value c)))
                 true)
    :else (do
            (rmap-set! [prop me] c)
            false)))

(defn md-awaken
  "(1) do initial evaluation of all ruled slots
   (2) call observers of all slots"
  [me]

  (chk me "md-awaken is nil")
  ;(dp :md-awaken-me!! (cty/minfo me))
  ;(prn :md-awaken-meta!! (meta me))
  ;(prn :md-awaken-deref!! (deref me))

  (chk (= :nascent (md-state me))
    (str "md-awaken> incoming md-state not= :nascent, it is " (md-state me) "md: " (minfo me)))

  (wtrx [0 999 nil :awk-entry (minfo me)]
    (rmap-meta-set! [:state me] :awakening)
    (doseq [[prop value] @me]
      ;; next is tricky: if prop is in :cz but nil, it has been
      ;; optimized-away and observed then in the rare case
      ;; it gets optimized away on other than the initial value.
      (binding [*mx* [me prop]]
        (when-let [c (prop (md-cz me) :not-found)]
          (cond
            (= c :not-found)
            ;; these need at least an initial observe
            (when (not (some #{prop} [:parent :name :fx-gen :on-quiesce]))
              (observe (md-type me) prop me value unbound nil))
            :else (when-not (= (c-state c) :awake)          ;; might have happened already
                    (c-awaken c))))))
    (rmap-meta-set! [:state me] :awake)
    me))


(defn mget [me prop]
  (chk me (str "mget passed nil for me accessing prop: " prop))
  (chk (mref? me) (str "mget passed non-model for me accessing prop: " prop ": " (minfo me)))
  (if (not (contains? @me prop))
    (do                                                     ;(prn :mget>nosuchprop!!! prop :me @me)
      ;(dp :mget prop (minfo me))
      (mx-throw (str "MXAPI_ILLEGAL_GET_NO_SUCH_prop> mget was attempted on non-existent prop \"" prop "\"."
                  "\n...> FYI: known props are" (keys @me)
                  "\n...> FYI: minof " (minfo me)

                  "\n...> FYI: use mget? if prop might not exist."))
      nil)
    (let [dbg? false]
      (when dbg?
        (prn :mget-sees-c? (cinfo (md-cell me prop)))
        (prn :me-prop (prop @me)))
      (if-let [c (md-cell me prop)]
        (cget c)
        (prop @me)))))

(defn mget?
  ([me prop]
   (mget? me prop nil))
  ([me prop alt-val]
   (chk me (str "mget passed nil for me accessing prop: " prop))
   (chk (mref? me) (str "mget passed non-model for me accessing prop: " prop ": " (minfo me)))
   (if (contains? @me prop)
     (mget me prop)
     alt-val)))


