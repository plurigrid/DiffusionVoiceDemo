(ns tilton.mx.api
  (:require
    [clojure.string :as str]
    [tilton.mx.base :refer [mx-throw]]
    [tilton.mx.util :as util]
    [tilton.mx.cell.base :refer [c-prop-name c-model] :as cb]
    [tilton.mx.model.peek :refer [mx-md mx-prop] :as mpeek]
    [tilton.mx.model.base :refer [mget mget?]]
    [tilton.mx.model.navigate :as nvg]
    [tilton.mx.model.core :as md]))

(def unbound cb/unbound)

(defn mx-bound? [x]
  (not= x cb/unbound))

(defn or-mx-bound
  ([x] (or-mx-bound x nil))
  ([x else]
   (if (mx-bound? x) x else)))

(defmacro _cache-bound []
  `(when (tilton.mx.api/mx-bound? ~'_cache)
     ~'_cache))

(defmacro dp [& bits]
  `(tilton.mx.cell.base/without-c-dependency
     (dart:core/print (clojure.string/join " " (list* :DPR>
                                                 (map #(let [bit# %]
                                                         (cond
                                                           (nil? bit#) :NIL
                                                           (tilton.mx.api/mref? bit#) (tilton.mx.api/minfo bit#)
                                                           :else bit#))
                                                   (vector ~@bits)))))
     nil))

(defn c-value [c]
  (cb/c-value c))

(defmacro dpx [& bits]
  `(do))

(defn rmap-meta-set! [[prop ref] new-value]
  (util/rmap-meta-set! [prop ref] new-value))

(defn rmap-set! [[prop ref] new-value]
  (util/rmap-set! [prop ref] new-value))

(defn pulse-now []
  (cb/pulse-now))

(defn millis-now []
  (.-millisecondsSinceEpoch (.now DateTime)))
;;; --- accessors -----------------------------------

(defn mset! [me prop new-value]
  (md/mset! me prop new-value))

(defn mswap! [me prop swap-fn & swap-fn-args]
  ;; DEPRECATED use mupdate!, the correct name/semantic
  (apply md/mswap! me prop swap-fn swap-fn-args))

(defn mupdate! [me prop swap-fn & swap-fn-args]
  (apply md/mupdate! me prop swap-fn swap-fn-args))

(defn mget [me prop]
  (tilton.mx.model.base/mget me prop))

(defn mget? [me prop & [alt-value]]
  (tilton.mx.model.base/mget? me prop alt-value))

;;; ---- lifecycle ---------------------------------
;; --- md-quiesce --

(defn md-quiesce-feature? []
  (md/md-quiesce-feature?))

(defn md-quiesce!
  ([me] (md/md-quiesce! me))
  ([me force?]
   (md/md-quiesce! me force?)))

(defn md-quiesce-if-owned!
  ([cell me]
   (md/md-quiesce-if-owned! cell me))
  ([owner prop me]
   (md/md-quiesce-if-owned! owner prop me)))

;;; --- navigation ---------------------------------

(defn navig [what where & option-kvs]
  (apply nvg/navig what where option-kvs))

(defn mname [me]
  (:name @me))

(defn mkids [me] (tilton.mx.model.base/mget? me :kids))

(defn mx-edge? [mx]
  (and (vector? mx)
    (= 2 (count mx))
    (mref? (first mx))
    (keyword? (second mx))))

(defn mx-md [mx]
  (mpeek/mx-md mx))
(defn mx-prop [mx]
  (mpeek/mx-prop mx))

(defmacro mmx-md [& [me]]
  (let [me (or me 'me)]
    `(mx-md (:mx @~me))))

(defmacro mmx-prop [& [me]]
  (let [me (or me 'me)]
    `(mx-prop (:mx @~me))))

(defmacro with-mx-edge [[meform property] & body]
  `(binding [tilton.mx.model.peek/*mx* [~meform ~property]]
     ~@body))

(defn fm! [what where]
  (md/fm! what where))

(defmacro mdv!
  "Search matrix ascendents from node 'me' looking for `what`, and extract `slot`"
  [what slot & [me]]
  (let [me (or me 'me)]
    `(tilton.mx.model.base/mget (tilton.mx.model.core/fm! ~what ~me) ~slot)))

;;; --- cell factories -----------------------------------------

(defn cI [value & option-kvs]
  (apply tilton.mx.cell.core/make-cell
    :value value
    :input? true
    option-kvs))

(defmacro cF [& body]
  `(tilton.mx.cell.core/make-c-formula
     :code '~body
     :rule (tilton.mx.cell.core/c-fn ~@body)))

(defmacro cF+ [[& options] & body]
  `(tilton.mx.cell.core/make-c-formula
     ~@options
     :code '~body
     :rule (tilton.mx.cell.core/c-fn ~@body)))

(defmacro cFn [& body]
  `(tilton.mx.cell.core/make-c-formula
     :code '(tilton.mx.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tilton.mx.cell.core/c-fn (tilton.mx.cell.base/without-c-dependency ~@body))))

(defmacro cF+n [[& options] & body]
  `(tilton.mx.cell.core/make-c-formula
     ~@options
     :code '(tilton.mx.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tilton.mx.cell.core/c-fn (tilton.mx.cell.base/without-c-dependency ~@body))))

;; -- cFn and cF+n are kept for historical reasons, but cFI and cFI+ are more accurate:

(defmacro cFI [& body]
  `(tilton.mx.cell.core/make-c-formula
     :code '(tilton.mx.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tilton.mx.cell.core/c-fn (tilton.mx.cell.base/without-c-dependency ~@body))))

(defmacro cFI+ [[& options] & body]
  `(tilton.mx.cell.core/make-c-formula
     ~@options
     :code '(tilton.mx.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tilton.mx.cell.core/c-fn (tilton.mx.cell.base/without-c-dependency ~@body))))

(defmacro cFonce [& body]
  `(tilton.mx.cell.core/make-c-formula
     :code '(tilton.mx.cell.base/without-c-dependency ~@body)
     :input? nil
     :rule (tilton.mx.cell.core/c-fn (tilton.mx.cell.base/without-c-dependency ~@body))))

(defmacro cF1 [& body]
  `(tilton.mx.cell.core/cFonce ~@body))

;;; --- fm navig ---------------------------------------------------------------

(defmacro fmu
  "Search \"up\", a misnomer for `:out`, excluding the starting point, which defaults lexically to 'me'"
  [name & [me]]
  (let [me-ref (or me 'me)]
    `(tilton.mx.model.navigate/navig ~name ~me-ref
       :me? false :out true :inside? false)))

(defmacro fmu-inc [name & [me]]
  "Search \"up\", a misnomer for `:out`, inclusive of the starting point, which defaults lexically to 'me'"
  (let [me-ref (or me 'me)]
    `(tilton.mx.model.navigate/navig ~name ~me-ref
       :me? true :out true :inside? false)))

(defmacro fasc-inc
  "Search strictly up `:mx` edges, inclusive of start"
  [name & [me]]
  `(let [name# ~name
         me# ~(or me 'me)]
     (tilton.mx.model.navigate/navig name# me# :me? true :out :asc-only)))

(defmacro fasc
  "Search strictly up `:mx` edges, exclusive of start"
  [name & [me]]
  `(let [name# ~name
         me# ~(or me 'me)]
     (tilton.mx.model.navigate/navig name# me# :me? false :out :asc-only)))

(defmacro mav
  "Search strictly up for the first appearance of PROP-NAME and return its value."
  [prop-name]
  `(tilton.mx.api/faprop ~prop-name ~'me))

(defn faprop
  "Search strictly up and mget value of first asc model with that property"
  ([prop-name md]
   (faprop prop-name md md))
  ([prop-name md start]
   (assert md (str "no md passed to faprop seeking " prop-name))
   (cond
     (contains? @md prop-name)
     (mget md prop-name)
     :else (if-let [edge-md (mmx-md md)]
             (recur prop-name edge-md start)
             (mx-throw (str "faprop> did not find model with property " prop-name
                         " searching up from " (mname md)
                         " seeking property " prop-name " value."))))))

(defmacro fm*
  "Search for `name` including me, inside me, and around me, in that order. Must find."
  [name & [me]]
  (let [me-ref (or me 'me)]
    `(tilton.mx.model.navigate/navig ~name ~me-ref
       :me? true :out true :inside? true :must? true)))

(defmacro fm*v
  "Search inside out everywhere for `name` and return its PROP, defaulting to `:value`. Must find `name`."
  [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tilton.mx.model.navigate/navig ~name ~me-ref
                    :me? true :out true :inside? true :must? true)]
       (tilton.mx.model.peek/chk other# (str "fm*v did not find other named " ~name " seeking property " ~prop))
       (tilton.mx.model.base/mget other# ~prop))))

(defmacro navdbg [option & body]
  `(let [options# ~option]
     (binding [tilton.mx.model.core/*navig-trace* (if (sequential? options#)
                                                    options# (vector options#))]
       (do ~@body))))

(defmacro muv
  "fmu NAME then `mget` PROP, defaulting to `:value`."
  [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tilton.mx.model.navigate/navig ~name ~me-ref
                    :me? false :out true :inside? false)]
       (tilton.mx.model.peek/chk other# (str "muv> did not find other named " ~name " seeking property " ~prop))
       (tilton.mx.model.base/mget other# ~prop))))

(defmacro muv-inc
  "MUV inclusive of the starting point"
  [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tilton.mx.model.navigate/navig ~name ~me-ref
                    :me? true :out true :inside? false)]
       (tilton.mx.model.peek/chk other# (str "muv> did not find other named " ~name " seeking property " ~prop))
       (tilton.mx.model.base/mget other# ~prop))))

(defmacro m*v
  "fm* NAME and return PROP, defaulting to :value, starting from ME, default 'me"
  [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tilton.mx.api/fm* ~name)]
       (tilton.mx.model.peek/chk other# (str "m*v> did not find other named " ~name " seeking property " ~prop))
       (tilton.mx.model.base/mget other# ~prop))))

;;; --- f/mx issues ----------------------------------------------

(defn cref? [c]
  (mpeek/cref? c))

(defn mref?
  ([x] (mref? x :anon))
  ([x tag] (mpeek/mref? x tag)))

(def +matrix+ tilton.mx.model.core/+matrix+)

(defn make [& arg-list]
  (apply tilton.mx.model.core/make arg-list))

(defmacro without-c-dependency [& body]
  `(binding [tilton.mx.cell.base/*depender* nil]
     ~@body))

(defmacro wmx-iso [& body]
  `(try
     (binding [tilton.mx.cell.base/*within-integrity* nil
               tilton.mx.cell.base/*depender* nil
               tilton.mx.cell.base/*defer-changes* false
               tilton.mx.cell.base/*call-stack* nil]
       ~@body)
     (catch Exception e#
       (dp :WMX-ISO-CAUGHT!!! e#)
       (throw e#))))

(defmacro def-mx-props
  "DEFN getters named [PREFIX]slot for each symbol in SLOTS"
  [prefix & slots]
  `(do
     ~@(map (fn [prop#]
              `(defn ~(symbol (str (or prefix "")
                                prop#))
                 [~'ref]
                 (tilton.mx.model.base/mget ~'ref ~(keyword prop#)))) slots)))

(defmacro cFkids [& tree]
  `(cF+ [:sst true] (tilton.mx.model.core/the-kids ~@tree)))

(defmacro with-integrity [[opcode info] & body]
  `(tilton.mx.cell.integrity/with-integrity [~opcode ~info]
     ~@body))

(defmacro with-cc [id & body]
  `(tilton.mx.cell.integrity/with-cc ~id
     ~@body))

(defmacro without-integrity [& body]
  `(tilton.mx.cell.integrity/without-integrity
     ~@body))

;;; --- debug -------------------------------

(defn cinfo [c]
  (mpeek/cinfo c))

(defn minfo
  ([md]
   (minfo md false))
  ([md verbose]
   (if (mx-edge? md)
     [:edge (mx-prop md) :md (minfo (mx-md md) verbose)]
     (mpeek/minfo md verbose))))

(defn counts-dump [tag]
  (util/counts-dump tag))

(defn counts-reset []
  (util/counts-reset))