(ns tilton.mx.cell.integrity
  (:require
    [tilton.mx.model.peek :refer [chk mref? minfo cinfo]]
    [tilton.mx.base
     :refer [prog1 wtrx dprn dp dpx trx mx-throw]]
    [tilton.mx.util
     :refer [ensure-vec  pln plnk fifo-add fifo-peek fifo-pop cl-find]]
    [tilton.mx.cell.base :as mxcb
     :refer [dpc dpm +pulse+ c-pulse c-optimized-away?
             +client-q-handler+ pulse-now
             *within-integrity* *defer-changes*
             *depender* ]]))

;; --- the pulse ------------------------------

(def ^:dynamic *one-pulse?* false) ;; todo test (or implement altogether
(def ^:dynamic *dp-log* false)

(defn data-pulse-next
  ([] (data-pulse-next :anon))
  ([pulse-info]
   (when-not *one-pulse?*
     (dpx :===========PULSE-NEXT!! pulse-info (inc @+pulse+))
     (swap! +pulse+ inc))))            ;; try as commute?

(defn c-current? [c]
  (dpm c :pulse :c-current?-SEES-C-pulse (c-pulse c) :+PULSE+ (mxcb/pulse-now))
  (= (c-pulse c) (mxcb/pulse-now)))

(defn c-pulse-update [c key]
  (when-not (c-optimized-away? c)
    (dpm c :pulse :c-pulse-upd!!! key :c-pulse (c-pulse c) :now-pulse (pulse-now))
    (chk (>= (pulse-now) (c-pulse c)) :c-pulse-update (cinfo c))
    (swap! c assoc :pulse (pulse-now))))

;; --- ufb utils ----------------------------

(def +ufb-opcodes+ [:tell-dependents
                    :awaken
                    :client
                    :ephemeral-reset
                    :change])

(def unfin-biz
  ;; no nested finbiz allowed as of now, so just
  ;; build it and in use fill the queues, ufb -do them, and
  ;; ensure they are empty before continuing.
  (into {} (for [i +ufb-opcodes+]
             [i (atom [])])))

(defn ufb-queue [opcode]
  (or (opcode unfin-biz)
    (mx-throw (str "ufb-queue> opcode unknown: " opcode))))

(defn ufb-add [opcode continuation]
  (fifo-add (ufb-queue opcode) continuation))

(defn ufb-assert-q-empty [opcode]
  (if-let [uqp (fifo-peek (ufb-queue opcode))]
    (do
      (mx-throw (str "ufb queue %s not empty, viz %s")
        opcode uqp))
    true))

;; --- the ufb and integrity beef ----------------------
;;    proper ordering of state propagation

(def ^:dynamic *ufb-do-q* nil)                              ;; debug aid

(defn ufb-do
  ([opcode]
   (ufb-do (ufb-queue opcode) opcode))

  ([q opcode]
   (when-let [[defer-info task] (fifo-pop q)]
     ;(trx nil :ufb-do-yep defer-info task)
     (task opcode defer-info)
     (recur q opcode))))

(defn finish-business []
  (dpx :fin-biz-entry @mxcb/+stop+)
  (loop [tag "tell-dependents"]
    (case tag
      "tell-dependents"
      (do
        (ufb-do :tell-dependents)
        (ufb-do :awaken)

        (recur
          (if (fifo-peek (ufb-queue :tell-dependents))
            "tell-dependents"
            "handle-clients")))

      "handle-clients"
      (do
        (if-let [cqh @+client-q-handler+]
          (cqh (ufb-queue :client))
          (ufb-do (ufb-queue :client) :client))

        (recur
          (if (fifo-peek (ufb-queue :client))
            "handle-clients"
            "ephemeral-reset")))

      "ephemeral-reset"
      (do (ufb-do :ephemeral-reset)
          (recur "deferred-state-change"))

      "deferred-state-change"
      (when-let [[defer-info task-fn] (fifo-pop (ufb-queue :change))]
        (data-pulse-next :deferred-state-chg)
        (dpx :dpnext-defer-info defer-info)
        (task-fn :change defer-info)
        (recur "tell-dependents"))

      (do (dprn :INTEG-finbiz-unexpected-tag!!! tag)
          (mx-throw (str "finbiz sees unexpected case tag!!! <" tag ">"))))))

;(declare call-with-integrity)

(defmacro with-integrity [[opcode info] & body]
  `(tilton.mx.cell.integrity/call-with-integrity
     ~opcode
     ~info
     (fn [~'opcode ~'defer-info]
       ~@body)))

(defmacro with-cc [id & body]
  ;; todo STAT validate that id is keyword?
  `(tilton.mx.cell.integrity/with-integrity (:change ~id)
     ~@body))

(defmacro without-integrity [& body]
  `(binding
     [tilton.mx.cell.base/*within-integrity* false
      *defer-changes* false
      *call-stack* '()]
     ~@body))

(def wi-depth (atom 0))

(defn call-with-integrity [opcode defer-info action]
  (do ;; wtrx (0 100 nil "cwi-begin" opcode *within-integrity*)
    (cond
      *within-integrity*
      (if opcode
        (prog1
          :deferred-to-ufb-1
          ;; set! is supposed to return the value being installed
          ;; in the place, but if the set! is deferred we return
          ;; something that will help someone who tries to use
          ;; the set!'ed value figure out what is going on:
          ;; (pln :cwi-defers opcode (first (ensure-vec defer-info)))
          (when (and opcode (not (some #{opcode} [:awaken])))
            (dpx :cwi-deferred!!!! opcode @wi-depth))
          (dpx :cwi-deferred!!! opcode (mxcb/cinfo defer-info)(mxcb/minfo defer-info) defer-info)
          (ufb-add opcode [defer-info action]))

        ;; thus by not supplying an opcode one can get something
        ;; executed immediately, potentially breaking data integrity
        ;; but signifying by having coded the with-integrity macro
        ;; that one is aware of this.
        ;;
        ;; If you have read this comment.
        ;;
        (do
          (when (and opcode (not (some #{opcode} [:awaken])))
            (dp :cwi-bypassing-integrity!!! opcode defer-info @wi-depth))
          (action opcode defer-info)))

      :else (binding [*within-integrity* true
                      *defer-changes* false]
              (swap! wi-depth inc)
              (dpx :cwi-go-1 opcode @wi-depth)
              (when (or (zero? @+pulse+)
                      (= opcode :change))
                ;; todo do not bump pulse until actual change confirmed
                (data-pulse-next [:cwi opcode defer-info]))

              ;;(pln :cwi-action!! opcode )
              (prog1
                (action opcode defer-info)

                (dpx :cwi-post-action)
                (do ;; tufte/p :finbiz
                  (finish-business))
                (ufb-assert-q-empty :tell-dependents)
                (ufb-assert-q-empty :change)
                (swap! wi-depth dec)
                (dpx :cwi-out!! opcode @wi-depth))))))

