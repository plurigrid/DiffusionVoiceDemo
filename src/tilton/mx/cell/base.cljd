(ns tilton.mx.cell.base
  (:require
    [tilton.mx.model.peek :refer [chk mref? minfo cref? cinfo c-type CellFormula]]
    [tilton.mx.base :as mxb
     :refer [mx-throw def-rmap-props dp]]

    [tilton.mx.util
     :refer [cl-find set-ify atom?
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-set! rmap-meta-set! mut-set!]
     :as utc]

    [tilton.mx.foundation :refer [PObserver observe] :as mx]))

(declare dpm)

;; --- the Cells beef -----------------------

;; --- pulse, the Cells state clock ---------
(def +pulse+ (atom 0))
(defn pulse-now [] @+pulse+)
(defn cells-init []
  (reset! +pulse+ 0))

;; --- dependency tracking -------------------
(def ^:dynamic *causation* '())
(def ^:dynamic *call-stack* nil)
(def ^:dynamic *depender*
  "*depender* let's us differentiate between the call stack and
and dependency. The problem with overloading *call-stack* with both roles
is that we miss cyclic reentrance when we use without-c-dependency in a
rule to get once behavior or just when fm-traversing to find someone"
  nil)

;; --- integrity ------------------------------
(def ^:dynamic *defer-changes* false)
(def +client-q-handler+ (atom nil))

(defmacro WITHOUT-mx-isolation [& body]
  `(do
     (when (or tilton.mx.cell.base/*within-integrity*
             tilton.mx.cell.base/*depender*
             tilton.mx.cell.base/*defer-changes*
             tilton.mx.cell.base/*call-stack*)
       (tilton.mx.base/dp :DANGER-mx-iso-ignoring!!!!!!!!! tilton.mx.cell.base/*within-integrity*
         tilton.mx.cell.base/*depender*
         tilton.mx.cell.base/*defer-changes*
         tilton.mx.cell.base/*call-stack*))
     ~@body))

(defmacro wmx-iso [& body]
  `(binding [tilton.mx.cell.base/*within-integrity* nil
             tilton.mx.cell.base/*depender* nil
             tilton.mx.cell.base/*defer-changes* false
             tilton.mx.cell.base/*call-stack* nil]
     ~@body))

(def unbound (gensym "unbound-value"))
(defn when-bound [x]
  (when (not= x unbound) x))

(def uncurrent (gensym "uncurrent-formulaic-value"))

(def ^:dynamic *within-integrity* false)

;; --- debug stuff -----------------------------
(def ^:dynamic *finbiz-id* 0)
(def ^:dynamic *c-prop-depth* 0)

(def +c-dbg+ (atom false))

(defn c-dbg [c]
  (:fx$dpk @c))

;; --- procedure division ----------------------

(defn cells-reset
  ([] (cells-reset {}))
  ([options]
   (reset! +c-dbg+ (:dbg options false))
   (reset! +pulse+ 0)
   (reset! +client-q-handler+ (:client-queue-handler options))))

(defmacro without-c-dependency [& body]
  `(binding [tilton.mx.cell.base/*depender* nil]
     ~@body))

(defn +cause []
  (first *causation*))

;; --- c-quiesce! -----------

(defn c-quiesce! [c]
  (chk (cref? c))
  (dpm c :quiesce :entry)
  (when-not false
    (chk (not (c-quiesced? c))
      (str "c-quiess!> already quiesced " (cinfo c)))
    (when-let [onq (:on-quiesce @c)]
      (dpm c :quiesce :calling-onq!!!!!! onq)
      (onq c))
    (unlink-from-callers c)
    (unlink-from-used c :quiesce)
    (rmap-set! [:quiesced? c] true)))

(defn c-quiesced? [c]
  (chk (cref? c)
    (str "c-quiessed?> failed assertion cref? on:" (cinfo c)))
  (:quiesced? @c))

(defn c-formula? [c]
  (and c (atom? c) (c-type c)
    (dart/is? (c-type c) CellFormula)))

(mxb/def-rmap-props c-
  me prop state input? rule pulse pulse-last-changed pulse-observed
  useds users callers optimize ephemeral? sink on-quiesce
  lazy synapses synaptic? code async? async-then for-each debug)

(defn c-code$ [c]
  (prn-str (:code @c)))

(defn c-value [c]
  (chk (atom? c))
  (cond
    (cref? c)
    (:value @c)

    :else @c))

(defn c-optimized-away? [c]
  (chk (atom? c) (str :c-opti-away?-sees-not-atom (cinfo c)))
  (chk (cref? c) (str :c-opti-away?-sees-NON-cref (cinfo c)))
  (:optimized? @c))

(defn c-model [rc]
  (:me @rc))

(defn c-mname [c]
  (if-let [md (c-model c)]
    (or (:name @md)
      "anon")
    "no-md"))

(defn c-prop-name [rc]
  (:prop @rc))

(defn c-value-state [rc]
  (let [v (c-value rc)]
    (cond
      (= unbound v) :unbound
      (= uncurrent v) :uncurrent
      :else :valid)))

(defn c-unbound? [rc]
  (= :unbound (c-value-state rc)))

(defn c-valid? [rc]
  (= :valid (c-value-state rc)))

(defn atom-dump [a]
  (if (atom? a)
    (atom-dump (deref a))
    a))

(def ^:dynamic *dpc-enabled* false)

(defn dpc [c category & bits]
  (when *dpc-enabled*
    (chk (cref? c) :dpc-ngc category)
    (when-let [dbg (c-dbg c)]
      (when (or (true? dbg) (= category dbg) (when (vector? dbg) (some #{category} dbg)))
        (apply dp :DPC category (first bits) (cinfo c) (rest bits))))))

;;; --- dpm -------------------------------------------------------------

(defn dpm-mx-dbg
  "Decide which dpm keys (or boolean) an mx wants traced, defaulting to *fx$dpk*"
  [mx]
  (chk (or (nil? mx) (mref? mx) (cref? mx)) :dpm-sees-non-nil-non-mx mx)
  ;(when mx (dp :fxdpk?  (contains? (meta mx) :fx$dpk)))
  (if (nil? mx)
    tilton.mx.base/*fx$dpk*
    (cond
      (cref? mx) (if (contains? @mx :fx$dpk)
                   (c-dbg mx)
                   tilton.mx.base/*fx$dpk*)
      (mref? mx) (if (contains? (meta mx) :fx$dpk)
                   (:fx$dpk (meta mx))
                   tilton.mx.base/*fx$dpk*))))

(defn dpm-match [mx-dbg category]
  (cond
    (boolean? mx-dbg) mx-dbg
    (keyword? mx-dbg) (recur [mx-dbg] category)
    (keyword? category) (recur mx-dbg [category])
    :else (some (set category) mx-dbg)))

(defn dp-fix [bits]
  (cond
    (sequential? bits) (mapv dp-fix bits)
    :else (cond
            (mref? bits) (minfo bits)
            (cref? bits) (cinfo bits)
            (sequential? bits) (mapv dp-fix bits)
            :else bits)))

(defmacro dpm [mx category label & bits]
  ;; sprinkle these as desired, usage:
  ;;    (dpm nil-cell-or-model keyword-or-keywords-coll label [& more-info])
  ;; eg
  ;;    (dpm cell :evic :entering-evic!!! 42)
  ;;
  #_ (when-not (keyword? label)
    (dart:core/print [:dpmmac-sees-non-keyword-label ]))
  `(tilton.mx.cell.base/without-c-dependency
     ;(tilton.mx.base/dp :dpm ~category ~label)
     (let [mx# ~mx]
       (when-let [mx-dbg# (tilton.mx.cell.base/dpm-mx-dbg mx#)]
         (when (tilton.mx.cell.base/dpm-match mx-dbg# ~category)
           (tilton.mx.base/dp :DPM ~label (tilton.mx.cell.base/dp-fix (vector ~@bits))
             ~category
             (cond
               (tilton.mx.model.peek/cref? mx#) (tilton.mx.model.peek/cinfo mx#)
               (tilton.mx.model.peek/mref? mx#) (tilton.mx.model.peek/minfo mx#))))))))

;; --- dependency maintenance --------------------------------

(defn dependency-record [used]
  (dpm *depender* :link :record-usage-of/if (not (c-optimized-away? used)) :used (cinfo used))
  (dpm used :link :record-sees-used (not (c-optimized-away? used)))
  (when-not (c-optimized-away? used)
    (mut-set! *depender* :useds
      (conj (c-useds *depender*) used))
    (mut-set! used :callers
      (conj (c-callers used) *depender*))))

(defn dependency-drop [used caller]
  (dpm caller :link :caller-DROPS (cinfo caller) :USED (cinfo used))
  (mut-set! caller :useds (disj (c-useds caller) used))
  (dpm used :link :used-DROPPING (cinfo used) :caller (cinfo caller))
  (mut-set! used :callers (disj (c-callers used) caller)))

(defn unlink-from-callers [used]
  (dpm used :link :UNLINK-callers (count (c-callers used)))
  (doseq [caller (c-callers used)]
    (dpm caller :link :dropped-by-used!!!! (cinfo used))
    (dependency-drop used caller)))

(defn unlink-from-used [caller why]
  "Tell dependencies they need not notify us when they change, then clear our record of them."
  (dpm caller :link :unlink-from-used!!! (count (c-useds caller)))
  (doseq [used (c-useds caller)]
    (dependency-drop used caller)))

;; debug aids --------------

(defn c-props [c k]
  (chk (cref? c) (str "cslots cref? fail "))
  ;; set conversion as convenience to test code
  (set (map c-prop (k @c))))

;;---



