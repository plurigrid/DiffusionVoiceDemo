(ns tilton.test.synapse
  (:require
    [tilton.mx.base :refer [trx dp dpx prog1]]
    [tilton.mx.util :refer [rmap-set!]]
    [tilton.mx.api :refer [cref? mref?]]
    [tilton.mx.cell.base
     :refer [without-c-dependency c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input?  cells-init
             c-model  c-valid? c-useds
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             *causation*
             c-synaptic?
             c-pulse c-pulse-last-changed c-ephemeral? c-prop
             *depender*
             *c-prop-depth*  c-lazy] :as cty]

    [tilton.mx.cell.integrity :refer [with-integrity]]
    [tilton.mx.cell.evaluate :refer [cget]]
    [tilton.mx.cell.observer :refer [ fn-obs]]

    [tilton.mx.cell.synapse :refer [with-synapse]]

    [tilton.mx.cell.core
     :refer [cF cF+ c_F cF_ cI cset! make-c-formula
             c-fn]]
    ))

(defn non-syn-even-filtering []
  ; first we look at how a formula can filter inputs *without* any special
  ; support, just by having the rule close over some state.
  (cells-init)
  (let [max 10
        x (cI nil)
        y (let [prior (atom nil)]
            (cF (when-let [x (cget x)]
                  (if (even? x)
                    (reset! prior x)
                    @prior))))
        z-runs (atom 0)
        z (cF
            (when-let [y (cget y)]
              (swap! z-runs inc)
              (assert (even? y)))
            y)]
    (dp :warm-up (cget z))
    (doseq [n (range max)]
      (cset! x n))
    (assert (= @z-runs (count (filter even? (range max))))))
  (dp :non-syn-even-OK))

(defn synaptic-even-filtering []
  ; now we look at how a synapse (an anonymous cell usable only by its containing formula)
  ; can achieve the same filtering.
  (cells-init)
  (let [max 10
        x (cI nil)
        syn-runs (atom 0)
        z-runs (atom 0)
        z (cF (when-let [x (with-synapse (:even-x)
                             (when-let [x (cget x)]
                               (dp :syn-sees-x x)
                               (swap! syn-runs inc)
                               (if (even? x)
                                 ^{:propagate true} [x]
                                 ^{:propagate false} [nil])))]
                (dp :x-see-x x)
                (swap! z-runs inc)
                (assert (even? (first x)))
                (first x)))]
    (dp :warm-up (cget z))
    (doseq [n (range max)]
      (cset! x n))
    (assert (= @syn-runs (count (range max))))
    (assert (= @z-runs (count (filter even? (range max)))))))

(defn abs [x]
  (if (neg? x) (- x) x))

(defn synaptic-delta []
  ; now we look at a simple stream behavior, returning the delta of two consecutive values
  (cells-init)
  (let [syn-runs (atom 0)
        alarm-runs (atom 0)
        reset-runs (fn []
                     (reset! syn-runs 0)
                     (reset! alarm-runs 0))
        x (cI nil)
        alarm (cF (when-let [d (with-synapse (:delta-x [prior (atom nil)])
                                 (when-let [x (cget x)]
                                   (swap! syn-runs inc)
                                   (let [delta (abs (if @prior
                                                           (- x @prior)
                                                           0))]
                                     (dp @prior x delta)
                                     (reset! prior x)
                                     ^{:propagate (not (zero? delta))} [delta])))]
                    (dp :delta d)
                    (swap! alarm-runs inc)
                    (if (> d 5)
                      :on :off)))]
    (dp :warm-up (cget alarm))
    (assert (= @syn-runs 0))
    (assert (= @alarm-runs 0))
    (assert (nil? (cget alarm)))

    (do (cset! x 0)
        (reset-runs)
        (cset! x 1)
        (assert (= @syn-runs 1))
        (assert (= @alarm-runs 1))
        (assert (= :off (cget alarm))))

    (do (cset! x 0)
        (reset-runs)
        (cset! x 1)
        (cset! x 2)
        (cset! x -5)
        (assert (= @syn-runs 3))
        (assert (= @alarm-runs 3))
        (assert (= :on (cget alarm))))))

(defn synaptic-sensitivity []
  ; here we look at a twist on the delta synapse: this time we report the
  ; unmodified stream value only when it has changed by a certain amount
  ; when compared with the prior value reported
  (cells-init)
  (let [syn-runs (atom 0)
        alarm-runs (atom 0)
        reset-runs (fn []
                     (reset! syn-runs 0)
                     (reset! alarm-runs 0))
        x (cI 0)
        alarm (cF (when-let [changed-x (with-synapse (:sensitivity-x [sensitivity 3
                                                                      reported (atom nil)])
                                         (when-let [x (cget x)]
                                           (swap! syn-runs inc)
                                           (cond
                                             (or (nil? @reported)
                                               (>= (abs (- x @reported))
                                                 sensitivity))
                                             (do (reset! reported x)
                                                 ^{:propagate true} [x])

                                             :default ^{:propagate false} [x])))]
                    (dp :changed changed-x)
                    (swap! alarm-runs inc)
                    (if (> changed-x 5)
                      :on :off)))]

    (do (reset-runs)
        (dp :warm-up (cget alarm))
        (assert (= @syn-runs 1))
        (assert (= @alarm-runs 1))
        (assert (= :off (cget alarm))))

    (do (cset! x 0)
        (reset-runs)
        (cset! x 1)
        (assert (= @syn-runs 1))
        (assert (= @alarm-runs 0))
        (assert (= :off (cget alarm))))

    (let [max 5]
      (cset! x -1)
      (reset-runs)
      (doseq [n (range max)]
        (cset! x n))
      (assert (= @syn-runs max))
      (assert (= @alarm-runs 1))
      (assert (= :off (cget alarm)))
      (cset! x 6)
      (assert (= :on (cget alarm))))))

(defn synaptic-grouping []
  (cells-init)
  (let [x (cI nil)
        y (cF (when-let [g (with-synapse (:grouper [buffer (atom [])])
                             (when-let [myx (cget x)]
                               (swap! buffer conj myx)
                               (let [buffer-val @buffer]
                                 (cond
                                   (= (count buffer-val) 3)
                                   (do
                                     (reset! buffer [])
                                     ;;(dp :syn-propping!!!!! buffer-val)
                                     ^{:propagate true} [buffer-val])

                                   :default ^{:propagate false} [buffer-val]))))]
                (dp :new-g g)
                (assert (= 3 (count g)))

                g))]
    (dp :warm-up (cget y))
    (doseq [n (range 10)]
      (cset! x n))

    (assert (= (cget y) [6 7 8]))))

(defn run-tests []
  (non-syn-even-filtering)
  (synaptic-even-filtering)
  ;(synaptic-delta)
  ;(synaptic-sensitivity)
  ;(synaptic-grouping)
  (dp :synapses-OK))