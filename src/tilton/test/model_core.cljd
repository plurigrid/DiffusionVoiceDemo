(ns tilton.test.model-core
  (:require
    [tilton.mx.foundation :refer [ mx-type]]
    [tilton.mx.base :refer [trx dp dpx prog1 *trx?*]]
    [tilton.mx.cell.base
     :refer [without-c-dependency
             cells-init c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input?
             c-model  c-valid? c-useds
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             unlink-from-callers *causation*
             c-prop-name c-synaptic?
             c-pulse c-pulse-last-changed c-ephemeral? c-prop c-props
             c-lazy] :as cty]
    [tilton.mx.cell.integrity :refer [with-integrity]]
    [tilton.mx.cell.observer :refer [fn-obs]]

    [tilton.mx.cell.core
     :refer [cF cF+ c-reset-next! cFonce cFn cf-freeze!
             cI cset! make-cell make-c-formula]]

    [tilton.mx.cell.evaluate :refer [cget c-awaken]]
    [tilton.mx.model.peek :refer [mname mref? cref?]]
    [tilton.mx.model.base :refer [ md-cz md-cell]]
    [tilton.mx.model.core
     :refer [make cFkids the-kids mdv! fm! make mset! mswap!]
     :as md]
    [tilton.mx.api :refer [dp dpx wmx-iso minfo mget mset! mupdate! mav muv
                           navig fasc fm* cF cF+ cI cFonce ]]))


(defn fm-0 []
  (cells-init)
  (let [u (md/make-family
            :kon (cI false :prop :kon)
            :kids (cF ;;(trx :kids-run! *depender*)
                    (when (mget me :kon)
                      (vector
                        (md/make
                          :parent me
                          :name :konzo
                          :kzo (cI 3))))))]
    (assert (not (some #{:mx-type } (keys @u))))
    ;;(dp :u-keys (keys @u))
    (assert (nil? (:kids @u)))
    ;;(dp :u-cells (:cz (meta u)) (meta u))
    (let [kc (md-cell u :kids)
          kon (md-cell u :kon)]
      ;;(dp :resetting-cell kon)
      (cset! kon true)
      (assert (= 1 (count (:kids @u))))
      (assert (navig :konzo u :inside? true))
      )))

(defn fm-2 []
  (let [u (md/make-family
            :name :uni
            :kids (cF (vector
                        (md/make
                          :parent me
                          :name :aa)
                        (md/make
                          :parent me
                          :name :bb
                          :kids (cF (vector
                                      (md/make
                                        :parent me
                                        :name :bba)

                                      (md/make
                                        :parent me
                                        :name :bbb)))))))]
    (let [bba (navig :bba u :inside? true :must? true)]
      (assert bba)
      (assert (navig :uni bba :inside? true :out true))
      (assert (navig :aa bba :inside? false :out true))
      (assert (navig :bb bba :inside? true :out true))
      (assert (navig :bbb bba :inside? false :out true))
      )
    ))


(defn fm-3 []
  (let [u (md/make-family
            :u63 (cF (+ (mdv! :aa :aa42)
                       (mdv! :bb :bb21)))
            :kon (cI false)
            :kids (cF (remove nil?
                        (vector
                          (md/make
                            :parent me
                            :name :aa
                            :aa42 (cF (* 2 (mdv! :bb :bb21)))
                            :aa3 (cI 3))
                          (when (mget me :kon)
                            (md/make
                              :parent me
                              :name :konzo
                              :kzo (cI 3)))
                          (md/make
                            :parent me
                            :name :bb
                            :bb21 (cF (* 7 (mdv! :aa :aa3))))))))]
    (assert (= 63 (mget u :u63)))
    (assert (= 42 (mdv! :aa :aa42 u)))
    (assert (= 21 (mdv! :bb :bb21 u)))
    (assert (nil? (navig :konzo u :must? false)))
    (cset! (md-cell u :kon) true)
    (assert (:kon @u))
    (assert (md-cell u :kon))
    (assert (= 3 (count (:kids @u))))
    (assert (navig :konzo u :inside? true))
    ))

(defn fm-3x []
  (let [u (md/make-family
            :u63 (cF (+ (mdv! :aa :aa42)
                       (mdv! :bb :bb21)))
            :kon (cI false)
            :kids (cF (the-kids
                        (md/make
                          :name :aa
                          :aa42 (cF (* 2 (mdv! :bb :bb21)))
                          :aa3 (cI 3))
                        (when (mget me :kon)
                          (md/make
                            :name :konzo
                            :kzo (cI 3)))
                        (md/make
                          :name :bb
                          :bb21 (cF (* 7 (mdv! :aa :aa3)))))))]
    (assert (= 63 (mget u :u63)))
    (assert (= 42 (mdv! :aa :aa42 u)))
    (assert (= 21 (mdv! :bb :bb21 u)))
    (assert (nil? (navig :konzo u :must? false)))
    (cset! (md-cell u :kon) true)
    (assert (:kon @u))
    (assert (md-cell u :kon))
    (assert (= 3 (count (:kids @u))))
    (assert (navig :konzo u :inside? true))
    ))


(defn fm-picker []
  (let [u (md/make-family
            :kids (cF (the-kids
                        (md/make :name :picker
                          :value (cI 42)
                          :kids (cF (the-kids
                                      (md/make
                                        :name :aax)
                                      (md/make
                                        :name :bbx))))
                        (md/make :name :dd
                          :kzo (cF (let [p (navig :picker me)]
                                     (dp :bingo p)
                                     (mget p :value)))))))]
    (assert (= 42 (mdv! :picker :value u)))
    (assert (= 42 (mdv! :dd :kzo u)))))

(defn mm-typed []
  (let [me (md/make
             :mx-type (md/Family.)
             :x2 (cI 2)
             :age (cF (* (mget me :x2)
                        21)))]
    (assert (= 42 (mget me :age)))
    (assert (dart/is? (mx-type me) md/Family)
      (str "type not family: " (mx-type me) " info " (meta me)))))

(defn mm-opti-1 []
  (let [me (md/make
             :x2 2
             :age (cF (* 21 (mget me :x2)))
             )]

    (assert (= 2 (mget me :x2)))
    (assert (= 42 (mget me :age)))
    (assert (nil? (md-cell me :age)))
    ))

(defn mm-install-alive []
  (let [bct (atom 0)
        res (do ;; sync
              (md/make
                :name "Bob"
                :action (cI nil
                          :ephemeral? true)
                :bogus (cF (if-let [be (mget me :bogus-e)]
                             (do
                               (trx :bingo-e!!!!!!!! be @bct)
                               (swap! bct inc)
                               (* 2 be))
                             (trx :bogus-no-e (:bogus-e @me))))
                :bogus-e (cI 21 :ephemeral? true)
                :loc (cF (case (mget me :action)
                           :leave :away
                           :return :home
                           :missing))))]
    ;(dp :meta (meta res))
    (assert (= (:cz (meta res)) (md-cz res)))
    (assert (= 4 (count (md-cz res))))
    (assert (every? cref? (vals (md-cz res))))
    (assert (= #{:action :loc :bogus :bogus-e} (set (keys (md-cz res)))))
    (assert (every? #(= res (c-me  %))  (vals (md-cz res))))
    (assert (= #{:action :loc :bogus :bogus-e}
          (set (map #(c-prop %)
                 (vals (md-cz res))))))
    (assert (= "Bob" (:name @res)))
    (assert (= "Bob" (mname res)))
    ;(dp :res @res)
    (assert (= 42 (:bogus @res)))
    (assert (= nil (:bogus-e @res))) ;; ephemeral, so reset to nil silently
    (assert (= nil (:action @res)))
    (dp :loc (:loc @res))
    (assert (= :missing (:loc @res)))
    (assert (= 1 @bct))
    (reset! bct 0)
    (mset! res :action :return)
    (assert (= :home (:loc @res)))
    (assert (zero? @bct))
    ))

(defn hello-model []
  (let [uni (md/make-family
              :kids (cF (the-kids
                          (md/make
                            :name :visitor
                            :moniker "World"
                            :action (cI nil
                                      :ephemeral? true
                                      :watch (fn [prop me new old c]
                                             (when new (trx :visitor-did new)))))
                          (md/make
                            :name :resident
                            :action (cI nil :ephemeral? true)
                            :location (cF+ [:watch (fn-obs (when new (trx :honey-im new)))]
                                        (case (mget me :action)
                                          :leave :away
                                          :return :home
                                          :missing))
                            :response (cF+ [:watch (fn-obs (when new
                                                           (trx :r-response new)))
                                            :ephemeral? true]
                                        (when (= :home (mget me :location))
                                          (when-let [act (mdv! :visitor :action)]
                                            (case act
                                              :knock-knock "hello, world")))))
                          (md/make
                            :name :alarm
                            :on-off (cF+ [:watch (fn-obs
                                                 (trx :telling-alarm-api new))]
                                      (if (= :home (mdv! :resident :location)) :off :on))
                            :activity (cF+ [:watch (fn-obs
                                                   (case new
                                                     :call-police (trx :auto-dialing-911)
                                                     nil))]
                                        (when (= :on (mget me :on-off))
                                          (when-let [action (mdv! :visitor :action)]
                                            (case action
                                              :smashing-window :call-police
                                              nil))))))))]
    (let [viz (fm! :visitor uni)
          rez (fm! :resident uni)]
      (assert (not (nil? viz)))
      (assert (not (nil? rez)))
      (assert (not (nil? (md-cell rez :action))))
      (assert (= :missing (mdv! :resident :location uni)))
      (mset! viz :action :knock-knock)
      (mset! viz :action :smashing-window)
      (assert (not (nil? (md-cell rez :action))))
      (mset! rez :action :return)
      (assert (= :home (mdv! :resident :location uni)))
      (mset! viz :action :knock-knock))))

(defn is [x] (assert x))

(defn md-freeze-default []
  (dp :hello-freeze)
  (cells-init)

  (let [fm (md/make
             :aa (cI 1)
             :bb (cF (cond
                       (= 2 (mget me :aa)) (cf-freeze!)
                       (> (mget me :aa) 2) 43
                       :default 42)))]
    (is (= 1 (mget fm :aa)))
    (is (= 42 (mget fm :bb)))

    (mswap! fm :aa inc)
    (is (= 2 (mget fm :aa)))
    (is (= 42 (mget fm :bb)))

    (mswap! fm :aa inc)
    (is (= 3 (mget fm :aa)))
    (is (= 42 (mget fm :bb)))))



(defn run-tests []
  (fm-0)
  (dp :fm-0 :ok)
  (fm-2)
  (dp :fm-2 :ok)
  (fm-3)
  (dp :fm-3 :ok)
  (fm-3x)
  (dp :fm-3x :ok)
  (fm-picker)
  (dp :fm-picker :ok)
  (mm-typed)
  (dp :fm-mm-typed :ok)
  (mm-opti-1)

  (dp :fm-opti-1 :ok)
  (mm-install-alive)
  (dp :fm-in-alive :ok)
  (hello-model)
  (dp :model-core-OK)
  (md-freeze-default)
  (dp :freeze-ok)
  )
