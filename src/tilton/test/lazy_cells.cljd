(ns tilton.test.lazy-cells
  (:require
    [tilton.mx.base
     :refer [trx dp dpx prog1]]
    [tilton.mx.cell.base
     :refer [without-c-dependency c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input?  cells-init
             c-model  c-valid? c-useds
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             unlink-from-callers *causation*
             c-prop-name c-synaptic?
             c-pulse c-pulse-last-changed c-ephemeral? c-prop
             *c-prop-depth*  c-lazy] :as cty]
    [tilton.mx.cell.integrity :refer [with-integrity]]
    [tilton.mx.cell.evaluate :refer [cget]]
    [tilton.mx.cell.observer
     :refer [ fn-obs]]
    [tilton.mx.cell.core
     :refer [cF cF+ c_F cF_ cI cset! c-fn make-c-formula]]
    [tilton.mx.model.peek :refer [mref?]]))


(defn solid-lazy []
  (cells-init)
  (let [xo (atom 0)
        a (cI 0)
        runs (atom 0)
       #_#_  x (cF_ [:watch (fn-obs (swap! xo inc))]
            (swap! runs inc)
            (dp :x-ran-runs-now @runs)
            (+ (cget a) 40))
        x (make-c-formula
            :watch (fn-obs ;;(dp :watch-incing-xo!!!!!!!!!)
                   (swap! xo inc))
            :value tilton.mx.cell.base/unbound
            :lazy :until-asked
            :rule (c-fn (swap! runs inc)
                    ;; (dp :x-ran-runs-now @runs)
                    (+ (cget a) 40)))]
    (assert (= unbound (:value @x)))
    (assert (= 0 @xo))
    (assert (= 0 @runs))
    (let [x (cget x)]
      (assert (= 40 x) (str "x not 40: " x)))
    (assert (= 1 @runs))
    (assert (= 1 @xo))
    (let [x (cget x)]
      (assert (= 40 x) (str "x not 40: " x)))
    (assert (= 1 @runs) (str "solid test runs not 1, instead: " @runs))
    (assert (= 1 @xo))
    (cset! a 100)
    (assert (= 2 @xo))
    (assert (= 140 (:value @x)))
    (assert (= 140 (cget x)))
    (assert (= 2 @xo))
    ))



(defn lazy-until-asked []
  (cells-init)
  (let [xo (atom 0)
        xr (atom 0)
        a (cI 0)
        x (c_F [:watch (fn-obs (swap! xo inc))]
            (swap! xr inc)
            (+ (cget a) 40))]
    (assert (= unbound (:value @x)))
    (assert (= 0 @xo))
    (assert (= 0 @xr))
    (assert (= 40 (cget x)))
    (assert (= 1 @xo))
    (assert (= 1 @xr))
    (cset! a 100)
    (assert (= 2 @xo))
    (assert (= 2 @xr))
    (assert (= 140 (:value @x)))
    (assert (= 140 (cget x)))
    (assert (= 2 @xo))
    (assert (= 2 @xr))
    ))

#_ ;; todo rethink, combined with freeze handline
(defn optimize-when-value-t []
  (cells-init)
  (let [xo (atom 0)
        xr (atom 0)
        a (cI 0 :prop :aaa)
        x (cF+ [:prop :xxx
                :dbg :opti
                :watch (fn-obs (swap! xo inc))
                :optimize :when-value-t]
            (swap! xr inc)
            (trx nil :reading-a!!!)
            (when-let [av (cget a)]
              (when (> av 1)
                (+ av 40))))]
    (assert (nil? (cget x)))
    (assert (= #{a} (c-useds x)))
    (cset! a 1)
    (dp :reset-finished!!!!!!!!!!)
    (assert (nil? (cget x)))
    (assert (= #{a} (c-useds x)))
    (dp :reset-2-beginning!!!!!!!!!!!!)
    (cset! a 2)
    (dp :reset-2-finished!!!!!!!!!!)
    (assert (= 42 (cget x)))
    (assert (empty? (c-useds x)))
    (trx nil :useds (c-useds x))
    (assert (empty? (c-callers x)))
    ))

;;; Next test removed until I recall the use case _and_ actually implement this
#_
(defn always-call []
  (dp :test-always-start)
  (cells-init)
  (let [xo (atom 0)
        ctx (atom nil)
        a (cI 0)
        runs (atom 0)
        #_#_  x (cF_ [:watch (fn-obs (swap! xo inc))]
                  (swap! runs inc)
                  (dp :x-ran-runs-now @runs)
                  (+ (cget a) 40))
        x (make-c-formula
            :prop :xxx
            :watch (fn-obs ;;(dp :watch-incing-xo!!! new old)
                   (swap! xo inc))
            :value tilton.mx.cell.base/unbound
            ;; todo make sure not optimized away
            :always-compute true
            :rule (c-fn
                    (dp :x-runs! :ctx @ctx)
                    (swap! runs inc)
                    (when @ctx
                      ;;(dp :x-ran-runs-now @runs)
                      (+ (cget a) 40))))]
    (assert (= unbound (:value @x)))
    (assert (= 0 @xo))
    (assert (= 0 @runs))
    (assert (nil? (cget x)))
    (assert (= 1 @runs))
    (assert (= 1 @xo))
    (reset! ctx true)
    (dp :ctx-true!!! @ctx)

    (let [x (cget x)]
      (assert (= 40 x) (str "1.x not 40: " x)))
    (assert (= 2 @runs) (str "runs not 2, instead " @runs))

    (assert (= 2 @xo) (str "a xo is not 2 it is " @xo))

    (let [x (cget x)]
      (assert (= 40 x) (str "2. x not 40: " x)))
    (assert (= 3 @runs))
    (assert (= 2 @xo) (str "always a xo is not 2 it is " @xo))
    (cset! a 100)
    (assert (= 3 @xo) (str "always b xo is not 3 it is " @xo))
    (assert (= 4 @runs) (str "always runs is not 3 it is " @runs))
    (assert (= 140 (:value @x)) (str "always internal x is not 140 it is " (:value @x)))
    (assert (= 140 (cget x)))
    (assert (= 5 @runs))
    (assert (= 3 @xo))
    (dp :test-always-ok)
    ))

(defn run-tests []
  ;(always-call)
  ;(dp :always-call-OK)
  ; The use case for this has been forgotten, but ISTR wanting a functional property
  ; without dependencies that had to be run fresh every time. sth like that.

  (solid-lazy)
  (dp :solid-lazy-OK)
  (lazy-until-asked)
  (dp :lazy-until-asked-OK)
  ;;(optimize-when-value-t)
  (dp :lazy-cells-OK))
