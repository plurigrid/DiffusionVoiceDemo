(ns tilton.test.cell-core
  (:require
    ["dart:developer" :as dev]
    [tilton.mx.foundation :refer [ mx-type]]
    [tilton.mx.base :as ub
     :refer [def-rmap-props trx dp dpx prog1]]
    [tilton.mx.model.peek :refer [minfo mref? c-type cref? cinfo Cell CellFormula]]
    [tilton.mx.util
     :refer [cl-find set-ify atom?
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-set! ]
     :as utc]
    [tilton.mx.cell.base
     :refer [without-c-dependency  cells-init
             c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input? unbound
             c-model c-valid? c-useds
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes*
             c-rule c-me c-value-state c-callers
             c-synapses c-prop-name
             unlink-from-callers *causation*
             c-synaptic?
             c-pulse c-pulse-last-changed c-ephemeral? c-prop
             c-lazy] :as cty]
    [tilton.mx.cell.core
     :refer [make-cell cI cF cFn cFonce cF+ cF+n cf-freeze! cset! cswap!]]
    [tilton.mx.cell.observer
     :refer [fn-obs]]
    [tilton.mx.cell.integrity
     :refer [with-integrity data-pulse-next]]
    [tilton.mx.cell.evaluate :refer [cget c-value-assume c-awaken
                                     record-dependency ensure-value-is-current]]
    ))

(def-rmap-props jj- boom)

(defn test-rmap []
  (let [x (atom {:value 0 :boom 42})]
    (assert (= 42 (jj-boom x)))
    (assert (= 0 (:value @x)))

    (rmap-set! [:value x] 42)
    (assert (= 42 (:value @x)))

    (assert (let [j (rmap-set! [:value x] 43)]
              ;(trx nil :xxx x @x (:value @x))
              ;(trx nil :j j (type j))
              (= 43 j)))
    (assert (= 44 (do (rmap-set! [:value x] 44))))
    (dp :test-rmap-OK)))

(defn test-fifo-build []
  (dp :testing-fifo-build)
  (let [q (make-fifo-queue)]
    (assert (fifo-empty? q))
    (assert (nil? (fifo-peek q)))
    (assert (nil? (fifo-pop q)))
    (assert (empty? (fifo-data q)))
    (do
      (fifo-add q 1)
      (assert (not (fifo-empty? q)))
      (assert (= 1 (fifo-peek q)))
      (assert (= 1 (fifo-pop q)))
      (assert (fifo-empty? q)))
    (do
      (fifo-add q 1)
      (fifo-add q 2)
      (assert (not (fifo-empty? q)))
      (assert (= 1 (fifo-peek q)))
      (assert (= 1 (fifo-pop q)))
      (assert (= 2 (fifo-pop q)))
      (assert (fifo-empty? q)))
    (dp :fifo-build-OK)))

(defn test-input-cell []
  (let [c (make-cell
            :prop :mol
            :value 42)]
    (assert (dart/is? (c-type c) Cell))
    (assert (= (c-value c) 42))
    (assert (= (c-value-state c) :valid))
    (assert (= #{} (c-callers c)))
    (assert (c-input? c))
    (assert (nil? (c-model c)))
    (assert (= :mol (c-prop c))))
  (dp :test-input-cell-OK))

(defn test-cI []
  (let [c (cI 42)]
    (dp :cic-is c  (c-type c))
    (assert (dart/is? (c-type c) Cell))
    (assert (= (c-value c) 42) (str "c-value is: " (c-value c) " ci " (cinfo c)))
    (assert (= (c-value-state c) :valid))
    (assert (= #{} (c-callers c)))
    (assert (c-input? c))
    (assert (c-valid? c))
    (assert (nil? (c-model c))))
  (dp :test-cI-OK))

(defn test-cI+ []
  (let [c (cI 42 :prop :cool)]
    (assert (dart/is? (c-type c) Cell))
    (assert (cref? c))
    (assert (= (c-value c) 42))
    (assert (= (c-value-state c) :valid))
    (assert (= #{} (c-callers c)))
    (assert (c-input? c))
    (assert (nil? (c-model c)))
    (assert (= :cool (c-prop c)(c-prop-name c)))
    (dp :test-cI+-OK)))

(defn test-cF []
  (let [c (cF (+ 40 2))]
    (assert (dart/is? (c-type c) CellFormula))
    (assert (fn? (c-rule c)))
    (assert (= (c-value c) unbound))
    (assert (= (c-value-state c) :unbound))
    (assert (= #{} (c-callers c)))
    (assert (= #{} (c-useds c)))
    (assert (not (c-input? c)))
    (assert (nil? (c-model c)))
    (dp :test-cF-OK)))

(defn test-cF+ []
  (let [c (cF+ (:optimize false :prop :bingo)
            (+ 40 2))]
    (assert (dart/is? (c-type c) CellFormula))
    (assert (cref? c))
    (assert (fn? (c-rule c)))
    (assert (= (c-value c) unbound))
    (assert (= (c-value-state c) :unbound))
    (assert (= #{} (c-callers c)))
    (assert (= #{} (c-useds c)))
    (assert (not (c-input? c)))
    (assert (nil? (c-model c)))
    (assert (not (c-optimize c)))
    (assert (= :bingo (c-prop c)(c-prop-name c)))
    (dp :test-cF+-OK)))

(defn t-eph-1 []
  (cells-init)
  (data-pulse-next)
  (let [boct (atom 0)
        b (cI nil
            :prop :b
            :obs (fn-obs
                   (swap! boct inc))
            :ephemeral? true)
        _ (c-awaken b)
        crun (atom 0)
        cobs (atom 0)
        c (cF+ [:prop :c
                :obs (fn-obs
                       (swap! cobs inc))]
            (swap! crun inc)
            (prog1
              (str "Hi " (cget b))
              (trx nil :cellread!! @b)))]
    (assert (c-rule c) "Early no rule")
    (assert (nil? (c-value b)))
    (assert (= :valid (c-value-state b)))
    (assert (c-valid? b))
    (assert (c-valid? b))
    (assert (= "Hi " (cget c)))
    (assert (= 1 @boct))
    (assert (= 1 @crun @cobs))
    (assert (nil? (:value @b)))

    (do
      (cset! b "Mom")
      (assert (= "Hi Mom" (cget c)))
      (assert (= 2 @boct))
      (assert (= 2 @crun @cobs))
      (assert (nil? (c-value b)))
      (assert (nil? (:value @b))))

    (do
      (cset! b "Mom")
      (assert (= "Hi Mom" (cget c)))
      (assert (= 3 @boct))
      (assert (= 3 @crun))
      (assert (= 2 @cobs))
      (assert (nil? (c-value b)))
      (assert (nil? (:value @b))))
    (dp :t-eph-1-OK)))

(defn t-cFn []
  (cells-init)
  (data-pulse-next)

  (let [a (cI 42 :prop :aa)
        b (cFn [:prop :bb]
            (/ (cget a) 2))
        c (cF (+ 1 (cget b)))]
    (assert (= 21 (cget b)))
    (assert (= 22 (cget c)))
    (cset! b 42)
    (assert (= 42 (cget b)))
    (assert (= 43 (cget c))))
  (dp :t-cFn-OK))

(defn t-cFonce []
  (let [a (cI 42 :prop :aa)
        b (cFonce [:prop :bb]
            (/ (cget a) 2))]
    (assert (= 21 (cget b)))
    (do
      (cset! a 2)
      (assert (= 2 (cget a)))
      (assert (= 21 (cget b))))
    (dp :t-cfonce-ok)))

(defn is [x] (assert x))

(defn opti-late-via-cf-freeze! []
  ; testing the usual case where a formula turns out, on first evaluation, not to depend on
  ; any cell, as well as the case where, once evaluated, on a subsequent evaluation a
  ; cell has no dependencies.
  (cells-init)

  (let [a (cI 1 :prop :aa)
        b (cF+ [:prop :bb]
            42)                                             ;; should optimize away
        c (cF+ [:prop :cc]
            (inc (cget b)))                                ;; should recursively optimize away, since b should
        d (cF+ [:prop :dd]
            (if (< (cget a) 3)
              (+ (cget a) (cget b) (cget c))
              17))
        ect (atom 0)
        e (cF+ [:prop :ee]
            (swap! ect inc)
            (if (< (cget a) 3)
              (+ (cget a) (cget b) (cget c))
              (cf-freeze! _cache)))]
    (do
      (is (= (cget a) 1))
      (is (= (cget b) 42))
      (is (= (cget c) 43))
      (is (= (cget d) 86))
      (is (c-optimized-away? b))
      (is (not (seq (c-useds b))))
      (is (c-optimized-away? c))
      (is (not (seq (c-useds c))))
      (is (not (c-optimized-away? d)))
      (is (= 1 (count (c-useds d))))
      (is (= 86 (cget e)))
      (is (not (c-optimized-away? e)))
      (is (= 1 (count (c-useds e))))
      (is (= 1 @ect)))

    (cswap! a inc)
    (is (= (cget a) 2))
    (is (= (cget d) 87))
    (is (= (cget e) 87))
    (is (= 2 @ect))

    (cswap! a inc)
    (is (= (cget a) 3))
    (is (= (cget d) 17))
    (is (= (cget e) 87))
    (is (= 3 @ect))

    (cswap! a inc)
    (is (= (cget a) 4))
    (is (= (cget d) 17))
    (is (= (cget e) 87))
    (is (not (seq (c-useds e))))
    (is (c-optimized-away? e))
    ; unlike the artificial freeze, the cf-freeze! mechanism does not require
    ; an extra invocation during which no dependencies are sampled in order to
    ; get optimized away. cf-freeze! optimizes on the spot.
    (is (= 3 @ect))))

(defn run-tests []
  (test-rmap)
  (test-fifo-build)
  (test-cI)
  (test-cI+)
  (test-cF)
  (test-cF+)
  (t-eph-1)
  (t-cFn)
  (t-cFonce)
  (opti-late-via-cf-freeze!)
  (dp "cell-core-OK"))
